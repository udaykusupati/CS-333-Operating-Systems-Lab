diff -Naur xv6-public/defs.h xv6-public-A/defs.h
--- xv6-public/defs.h	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/defs.h	2016-10-06 15:35:50.000000000 +0530
@@ -8,6 +8,7 @@
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct mystat;
 struct superblock;
 
 // bio.c
@@ -68,6 +69,7 @@
 void            kfree(char*);
 void            kinit1(void*, void*);
 void            kinit2(void*, void*);
+int 			getNumFreePages(void);
 
 // kbd.c
 void            kbdintr(void);
@@ -116,6 +118,9 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int 			getNumProc(void);
+int 			getMaxPid(void);
+int 			getProcInfo(int,struct mystat*);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff -Naur xv6-public/kalloc.c xv6-public-A/kalloc.c
--- xv6-public/kalloc.c	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/kalloc.c	2016-10-06 14:27:08.000000000 +0530
@@ -27,6 +27,22 @@
 // the pages mapped by entrypgdir on free list.
 // 2. main() calls kinit2() with the rest of the physical pages
 // after installing a full page table that maps them on all cores.
+int getNumFreePages(void)
+{
+  int count=0;
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+  struct run* r=kmem.freelist;
+  while(r)
+  {
+    count++;
+    r=r->next;
+  }
+  if(kmem.use_lock)
+    release(&kmem.lock);
+  return count;
+}
+
 void
 kinit1(void *vstart, void *vend)
 {
diff -Naur xv6-public/Makefile xv6-public-A/Makefile
--- xv6-public/Makefile	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/Makefile	2016-10-06 16:48:51.239326276 +0530
@@ -75,7 +75,7 @@
 LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
-CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
+CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -fno-omit-frame-pointer
 #CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -fvar-tracking -fvar-tracking-assignments -O0 -g -Wall -MD -gdwarf-2 -m32 -Werror -fno-omit-frame-pointer
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
@@ -149,7 +149,7 @@
 	$(OBJDUMP) -S _forktest > forktest.asm
 
 mkfs: mkfs.c fs.h
-	gcc -Werror -Wall -o mkfs mkfs.c
+	gcc -Wall -o mkfs mkfs.c
 
 # Prevent deletion of intermediate files, e.g. cat.o, after first build, so
 # that disk image changes after first build are persistent until clean.  More
@@ -173,6 +173,7 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_proctest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -242,6 +243,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	proctest.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff -Naur xv6-public/proc.c xv6-public-A/proc.c
--- xv6-public/proc.c	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/proc.c	2016-10-06 16:21:00.475208168 +0530
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "stat.h"
 
 struct {
   struct spinlock lock;
@@ -26,6 +27,59 @@
   initlock(&ptable.lock, "ptable");
 }
 
+int getNumProc(void)
+{
+  struct proc *p;
+  int count=0;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if(p->state ==RUNNING||p->state ==RUNNABLE||p->state ==SLEEPING||p->state ==ZOMBIE)
+    {
+        count++;
+    }
+  }
+  release(&ptable.lock);
+  return count;
+}
+
+int getMaxPid(void)
+{
+  struct proc *p=ptable.proc;
+  int maxPID=p->pid;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if(p->state ==RUNNING||p->state ==RUNNABLE||p->state ==SLEEPING||p->state ==ZOMBIE)
+    {
+        if(p->pid>maxPID)
+        {
+          maxPID=p->pid;
+        }
+    }
+  }
+  release(&ptable.lock);
+  return maxPID;
+}
+int getProcInfo(int pid, struct mystat* st)
+{
+  struct proc *p;
+  int found=0;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if(pid==p->pid){found=1;break;}
+  }
+  release(&ptable.lock);
+  if(found==0){return -1;}
+  else
+  {
+    st->size=p->sz;
+    st->switches=p->switches;
+    st->p_pid=p->parent->pid;
+    return 0;
+  }
+}
 //PAGEBREAK: 32
 // Look in the process table for an UNUSED proc.
 // If found, change state to EMBRYO and initialize
@@ -72,7 +126,7 @@
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
-
+  p->switches=0;
   return p;
 }
 
@@ -297,6 +351,7 @@
       proc = p;
       switchuvm(p);
       p->state = RUNNING;
+      p->switches++;
       swtch(&cpu->scheduler, p->context);
       switchkvm();
 
diff -Naur xv6-public/proc.h xv6-public-A/proc.h
--- xv6-public/proc.h	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/proc.h	2016-10-06 15:36:54.000000000 +0530
@@ -63,6 +63,7 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int switches;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff -Naur xv6-public/proctest.c xv6-public-A/proctest.c
--- xv6-public/proctest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-A/proctest.c	2016-10-06 16:49:30.214277325 +0530
@@ -0,0 +1,46 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  	struct mystat ans;
+  	struct mystat* st=&ans;
+  	//st->switches=10;
+  	//printf(1,"Boolean%d",
+  	printf(1,"FreePages=%d\n",getNumFreePages());
+  	printf(1,"NumProc=%d\n",getNumProc());
+  	printf(1,"MaxPid=%d\n\n",getMaxPid());
+  	int pid;
+  	for(pid=2;pid<=getMaxPid();pid++)
+  	{
+  		if(getProcInfo(pid,st)<0)
+  		{
+  			printf(1,"process doesnt exist");
+  		}	
+  		else
+  		{
+  			printf(1,"Stats of process %d:\nsize:%d\nswitches:%d\nparent's PID:%d\n\n",pid,st->size,st->switches,st->p_pid);
+  		}
+  	}
+  	printf(1,"Now Forking......\n");
+  	int i=0;
+  	int child=fork();
+  	if(child>0)
+  	{
+  		for(pid=2;pid<=getMaxPid();pid++)
+	  	{
+	  		if(getProcInfo(pid,st)<0)
+	  		{
+	  			printf(1,"process doesnt exist");
+	  		}	
+	  		else
+	  		{
+	  			printf(1,"Stats of process %d:\nsize:%d\nswitches:%d\nparent's PID:%d\n\n",pid,st->size,st->switches,st->p_pid);
+	  		}
+	  	}
+  	}	
+  	sleep(10);	
+  exit();
+}
diff -Naur xv6-public/stat.h xv6-public-A/stat.h
--- xv6-public/stat.h	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/stat.h	2016-10-06 15:33:06.000000000 +0530
@@ -9,3 +9,8 @@
   short nlink; // Number of links to file
   uint size;   // Size of file in bytes
 };
+struct mystat {
+	uint size;
+	int p_pid;
+	int switches;
+};
\ No newline at end of file
diff -Naur xv6-public/syscall.c xv6-public-A/syscall.c
--- xv6-public/syscall.c	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/syscall.c	2016-10-06 15:37:13.000000000 +0530
@@ -98,6 +98,10 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPid(void);
+extern int sys_getNumFreePages(void);
+extern int sys_getProcInfo(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +125,10 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getNumProc] sys_getNumProc,
+[SYS_getMaxPid] sys_getMaxPid,
+[SYS_getNumFreePages] sys_getNumFreePages,
+[SYS_getProcInfo] sys_getProcInfo,
 };
 
 void
diff -Naur xv6-public/syscall.h xv6-public-A/syscall.h
--- xv6-public/syscall.h	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/syscall.h	2016-10-06 15:31:06.000000000 +0530
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getNumProc 22
+#define SYS_getMaxPid 23
+#define SYS_getNumFreePages 24
+#define SYS_getProcInfo 25
\ No newline at end of file
diff -Naur xv6-public/sysproc.c xv6-public-A/sysproc.c
--- xv6-public/sysproc.c	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/sysproc.c	2016-10-06 16:21:20.010886280 +0530
@@ -6,7 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
-
+#include "stat.h"
 int
 sys_fork(void)
 {
@@ -89,3 +89,29 @@
   release(&tickslock);
   return xticks;
 }
+
+int sys_getNumProc(void)
+{
+  return getNumProc();
+}
+
+int sys_getMaxPid(void)
+{
+  return getMaxPid();
+}
+
+int sys_getNumFreePages(void)
+{
+  return getNumFreePages();
+}
+
+int sys_getProcInfo(void)
+{
+  struct mystat *st;
+  int pid;
+  if(argint(0,&pid)<0)
+    return -1;
+  if(argptr(1,(void*)&st,sizeof(*st))<0)
+    return -1;
+  return getProcInfo(pid,st);
+}
\ No newline at end of file
diff -Naur xv6-public/user.h xv6-public-A/user.h
--- xv6-public/user.h	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/user.h	2016-10-06 15:35:25.000000000 +0530
@@ -1,4 +1,5 @@
 struct stat;
+struct mystat;
 struct rtcdate;
 
 // system calls
@@ -23,7 +24,10 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int getNumProc(void);
+int getMaxPid(void);
+int getNumFreePages(void);
+int getProcInfo(int,struct mystat*);
 // ulib.c
 int stat(char*, struct stat*);
 char* strcpy(char*, char*);
diff -Naur xv6-public/usys.S xv6-public-A/usys.S
--- xv6-public/usys.S	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-A/usys.S	2016-10-06 15:30:34.000000000 +0530
@@ -29,3 +29,7 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPid)
+SYSCALL(getNumFreePages)
+SYSCALL(getProcInfo)
\ No newline at end of file
