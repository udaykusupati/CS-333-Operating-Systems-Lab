diff -Naur xv6-public/sysproc.c xv6-public-B/sysproc.c
--- xv6-public/sysproc.c	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-B/sysproc.c	2016-10-06 15:56:18.000000000 +0530
@@ -51,8 +51,9 @@
   if(argint(0, &n) < 0)
     return -1;
   addr = proc->sz;
-  if(growproc(n) < 0)
-    return -1;
+  //if(growproc(n) < 0)
+    //return -1;
+  proc->sz=proc->sz+n;
   return addr;
 }
 
diff -Naur xv6-public/trap.c xv6-public-B/trap.c
--- xv6-public/trap.c	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-B/trap.c	2016-10-06 16:42:14.242212065 +0530
@@ -13,6 +13,8 @@
 extern uint vectors[];  // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
 uint ticks;
+int
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
 
 void
 tvinit(void)
@@ -45,7 +47,7 @@
       exit();
     return;
   }
-
+  uint va;
   switch(tf->trapno){
   case T_IRQ0 + IRQ_TIMER:
     if(cpunum() == 0){
@@ -77,7 +79,23 @@
             cpunum(), tf->cs, tf->eip);
     lapiceoi();
     break;
-
+  case T_PGFLT:
+    //allocuvm(proc->pgdir, proc->sz, proc->sz + 1);
+    //cprintf("pagefault\n");
+    va=rcr2();
+    va = PGROUNDDOWN(va);
+    char* mem = kalloc();
+    if(mem == 0){
+      cprintf("allocuvm out of memory\n");
+      //deallocuvm(proc->pgdir, newsz, oldsz);
+    }
+    memset(mem, 0, PGSIZE);
+    if(mappages(proc->pgdir, (char*)va, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+      cprintf("allocuvm out of memory (2)\n");
+      //deallocuvm(proc->pgdir, proc->sz+1, proc->sz);
+      kfree(mem);
+    }
+    break;
   //PAGEBREAK: 13
   default:
     if(proc == 0 || (tf->cs&3) == 0){
diff -Naur xv6-public/vm.c xv6-public-B/vm.c
--- xv6-public/vm.c	2016-10-04 16:19:57.000000000 +0530
+++ xv6-public-B/vm.c	2016-10-06 16:10:54.000000000 +0530
@@ -66,7 +66,7 @@
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
