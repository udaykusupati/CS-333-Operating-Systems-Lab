diff -Naur xv6/check1.c michaelee-xv6-9dce23b9d05d_2/check1.c
--- xv6/check1.c	2016-09-22 18:53:22.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/check1.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,53 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(void)
-{
-	// printf(1, "Hello world %d \n", getprio());
-	// setprio(100);
-	// printf(1, "Hello world %d \n", getprio());
-	// exit();
-	int j = 0;
-	int pri = getprio();
- 	printf(1, "The priority is %d\n", pri);
- 	long long int i = 0;
- 	int parent = fork();
- 	if(parent>0)
- 	{
- 		//In parent
- 		setprio(20);
-	 	pri = getprio();
-	 	printf(1, "The priority in parent is %d\n", pri);
-	 	while(1)
-	 	{
-	 		i++;
-	 		if(i == 10000000)
-	 		{
-	 			j++;
-	 			printf(1, "parent %d\n", j );
-	 			i = 0;
-	 		}
-	 	}
- 	}
- 	else
- 	{
- 		//In child
- 		setprio(40);
-	 	pri = getprio();
-	 	printf(1, "The priority in child is %d\n", pri);
-	 	while(1)
-	 	{
-	 		i++;
-	 		if(i == 10000000)
-	 		{
-	 			j++;
-	 			printf(1, "child %d\n", j );
-	 			i = 0;
-	 		}
-	 	}
- 	}
-	 	
- 	exit();
-}
\ No newline at end of file
diff -Naur xv6/defs.h michaelee-xv6-9dce23b9d05d_2/defs.h
--- xv6/defs.h	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/defs.h	2016-10-02 22:03:53.000000000 +0530
@@ -66,6 +66,8 @@
 void            kfree(char*);
 void            kinit1(void*, void*);
 void            kinit2(void*, void*);
+int 			getNumFreePages(void);
+//EDIT MADE HERE 
 
 // kbd.c
 void            kbdintr(void);
@@ -176,6 +178,7 @@
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+void            pageFaultHandler(uint err_code);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff -Naur xv6/kalloc.c michaelee-xv6-9dce23b9d05d_2/kalloc.c
--- xv6/kalloc.c	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/kalloc.c	2016-10-01 19:25:02.000000000 +0530
@@ -94,3 +94,26 @@
   return (char*)r;
 }
 
+
+
+int
+getNumFreePages(void)
+{
+  if(kmem.use_lock)
+  {
+    acquire(&kmem.lock);
+  }
+  struct run * myfree = kmem.freelist;
+  int freepg = 0;
+  while(myfree)
+  {
+    freepg++;
+    myfree = myfree->next;
+  }
+  if(kmem.use_lock)
+  {
+    release(&kmem.lock);
+  }
+  return freepg;
+}
+//EDIT MADE HERE
\ No newline at end of file
diff -Naur xv6/Makefile michaelee-xv6-9dce23b9d05d_2/Makefile
--- xv6/Makefile	2016-09-22 18:01:48.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/Makefile	2016-10-01 22:03:44.000000000 +0530
@@ -69,7 +69,7 @@
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 #CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
-CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
+CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Wall -MD -ggdb -m32 -fno-omit-frame-pointer
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
@@ -142,7 +142,7 @@
 	$(OBJDUMP) -S _forktest > forktest.asm
 
 mkfs: mkfs.c fs.h
-	gcc -Werror -Wall -o mkfs mkfs.c
+	gcc -Wall -o mkfs mkfs.c
 
 # Prevent deletion of intermediate files, e.g. cat.o, after first build, so
 # that disk image changes after first build are persistent until clean.  More
@@ -167,9 +167,8 @@
 	_wc\
 	_zombie\
 	_bigtest\
-	_check1\
+	_testcow\
 	#_getcount\
-	
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -239,7 +238,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	check1.c\
+	testcow.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff -Naur xv6/proc.c michaelee-xv6-9dce23b9d05d_2/proc.c
--- xv6/proc.c	2016-09-22 18:37:50.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/proc.c	2015-06-03 11:33:54.000000000 +0530
@@ -47,8 +47,6 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-  p->prio = 10;   //Default priority is set to 10
-  p->nSched = p->prio;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -267,42 +265,24 @@
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    int found = 0;
-    int i;
-    for(i =0;i<2;i++)
-    {
-      for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-        if(p->state != RUNNABLE || p->nSched==0)
-          continue;
-
-        // Switch to chosen process.  It is the process's job
-        // to release ptable.lock and then reacquire it
-        // before jumping back to us.
-        proc = p;
-        switchuvm(p);
-        p->state = RUNNING;
-        p->nSched--;
-        found = 1;
-        swtch(&cpu->scheduler, proc->context);
-        switchkvm();
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        proc = 0;
-      }
-    }
-    if(!found)
-    {
-      for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-      {
-        if(p->state == RUNNABLE)
-        {
-          p->nSched = p->prio;
-        }
-      }
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != RUNNABLE)
+        continue;
+
+      // Switch to chosen process.  It is the process's job
+      // to release ptable.lock and then reacquire it
+      // before jumping back to us.
+      proc = p;
+      switchuvm(p);
+      p->state = RUNNING;
+      swtch(&cpu->scheduler, proc->context);
+      switchkvm();
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      proc = 0;
     }
     release(&ptable.lock);
-    
 
   }
 }
@@ -476,15 +456,4 @@
   }
 }
 
-int setprio(int n)
-{
-  acquire(&ptable.lock);
-  int oldPrio = proc->prio;
-  proc->prio = n;
-  release(&ptable.lock);
-  if(oldPrio>n)
-  {
-    yield();
-  }
-  return 0;
-}
\ No newline at end of file
+
diff -Naur xv6/proc.h michaelee-xv6-9dce23b9d05d_2/proc.h
--- xv6/proc.h	2016-09-22 18:29:48.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/proc.h	2015-06-03 11:33:54.000000000 +0530
@@ -66,8 +66,6 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
-  int prio;                    // Process priority
-  int nSched;                  // number off times a process is remaining to be scheduled
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -75,4 +73,3 @@
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
-int setprio(int n);
\ No newline at end of file
diff -Naur xv6/syscall.c michaelee-xv6-9dce23b9d05d_2/syscall.c
--- xv6/syscall.c	2016-09-22 16:36:50.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/syscall.c	2016-10-01 18:55:12.000000000 +0530
@@ -98,8 +98,8 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
-extern int sys_setprio(void);
-extern int sys_getprio(void);
+extern int sys_getNumFreePages(void);
+//EDIT MADE HERE 
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,8 +123,7 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
-[SYS_setprio] sys_setprio,
-[SYS_getprio] sys_getprio,
+[SYS_getNumFreePages] sys_getNumFreePages,
 };
 
 void
diff -Naur xv6/syscall.h michaelee-xv6-9dce23b9d05d_2/syscall.h
--- xv6/syscall.h	2016-09-22 15:51:04.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/syscall.h	2016-10-01 19:22:14.000000000 +0530
@@ -20,5 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
-#define SYS_setprio  22
-#define SYS_getprio  23
+#define SYS_getNumFreePages 22
\ No newline at end of file
diff -Naur xv6/sysproc.c michaelee-xv6-9dce23b9d05d_2/sysproc.c
--- xv6/sysproc.c	2016-09-22 17:50:48.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/sysproc.c	2016-10-01 19:11:58.000000000 +0530
@@ -89,17 +89,7 @@
   return xticks;
 }
 
-int 
-sys_setprio(void)
+int sys_getNumFreePages(void)
 {
-  int n;
-  if(argint(0, &n) < 0)
-    return -1;
-  return setprio(n);
-}
-
-int 
-sys_getprio(void)
-{
-  return proc->prio;
+  return getNumFreePages();
 }
\ No newline at end of file
diff -Naur xv6/testcow.c michaelee-xv6-9dce23b9d05d_2/testcow.c
--- xv6/testcow.c	1970-01-01 05:30:00.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/testcow.c	2016-10-01 22:06:19.000000000 +0530
@@ -0,0 +1,37 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "param.h"
+#include "types.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+int a = 1;
+int main(void)
+{
+	int pid = fork();
+	printf(1,"fork done already, %d\n", getNumFreePages());
+	if(pid<0)
+	{
+		printf(1,"Error occured \n");
+		exit();
+	}
+	if(pid == 0)
+	{
+		if(a == 1)
+		{
+			printf(1,"Number of free pages dint decrease here when you are just reading!, %d\n", getNumFreePages());
+		}
+		a = 3;
+		printf(1,"Number of free pages did decrease here when you are writing!, %d\n", getNumFreePages());
+		a = 5;
+		printf(1,"Number of free pages did not decrease here when you are writing after changing permisiions, i.e after one write to a variable 'a' !, %d\n", getNumFreePages());
+		wait();
+		exit();
+	}
+	wait();
+	exit();	
+}
\ No newline at end of file
diff -Naur xv6/trap.c michaelee-xv6-9dce23b9d05d_2/trap.c
--- xv6/trap.c	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/trap.c	2016-10-02 22:03:31.000000000 +0530
@@ -47,6 +47,10 @@
   }
 
   switch(tf->trapno){
+  case T_PGFLT:
+    //cprintf("Switch case lo page fault \n ");
+    pageFaultHandler(tf->err);
+    break;
   case T_IRQ0 + IRQ_TIMER:
     if(cpu->id == 0){
       acquire(&tickslock);
diff -Naur xv6/user.h michaelee-xv6-9dce23b9d05d_2/user.h
--- xv6/user.h	2016-09-22 16:41:58.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/user.h	2016-10-01 18:55:55.000000000 +0530
@@ -22,8 +22,7 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-int setprio(int);
-int getprio(void);
+int getNumFreePages(void);
 
 // ulib.c
 int stat(char*, struct stat*);
diff -Naur xv6/usys.S michaelee-xv6-9dce23b9d05d_2/usys.S
--- xv6/usys.S	2016-09-22 15:51:46.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/usys.S	2016-10-01 19:20:40.000000000 +0530
@@ -29,5 +29,4 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
-SYSCALL(setprio)
-SYSCALL(getprio)
+SYSCALL(getNumFreePages)
\ No newline at end of file
diff -Naur xv6/vm.c michaelee-xv6-9dce23b9d05d_2/vm.c
--- xv6/vm.c	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/vm.c	2016-10-02 23:56:05.807191091 +0530
@@ -6,11 +6,17 @@
 #include "mmu.h"
 #include "proc.h"
 #include "elf.h"
+#include "spinlock.h"
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
 struct segdesc gdt[NSEGS];
 
+
+char pageCount[PHYSTOP >> PGSHIFT];
+
+struct spinlock countLock;
+
 // Set up CPU's kernel segment descriptors.
 // Run once on entry on each CPU.
 void
@@ -188,6 +194,10 @@
   mem = kalloc();
   memset(mem, 0, PGSIZE);
   mappages(pgdir, 0, PGSIZE, v2p(mem), PTE_W|PTE_U);
+  initlock(&countLock,"myname");
+  acquire(&countLock);
+  pageCount[v2p(mem) >> PGSHIFT]++;
+  release(&countLock);
   memmove(mem, init, sz);
 }
 
@@ -238,6 +248,9 @@
     }
     memset(mem, 0, PGSIZE);
     mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
+    acquire(&countLock);
+    pageCount[v2p(mem) >> PGSHIFT]++;
+    release(&countLock);
   }
   return newsz;
 }
@@ -264,8 +277,15 @@
       pa = PTE_ADDR(*pte);
       if(pa == 0)
         panic("kfree");
-      char *v = p2v(pa);
-      kfree(v);
+      /*char *v = p2v(pa);
+      kfree(v);*/
+      acquire(&countLock);
+      pageCount[pa >> PGSHIFT]--;
+      if(pageCount[pa >> PGSHIFT] == 0) {
+        char *v = p2v(pa);
+        kfree(v);
+      }
+      release(&countLock);
       *pte = 0;
     }
   }
@@ -312,7 +332,7 @@
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
-  char *mem;
+  //char *mem;
 
   if((d = setupkvm()) == 0)
     return 0;
@@ -321,18 +341,27 @@
       panic("copyuvm: pte should exist");
     if(!(*pte & PTE_P))
       panic("copyuvm: page not present");
+    *pte &= ~PTE_W;
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+    /*if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)p2v(pa), PGSIZE);
     if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
-      goto bad;
+      goto bad;*/
+    if(mappages(d, (void*)i, PGSIZE, pa, flags) < 0)
+       goto bad;
+    // Increase reference count for page pa
+     acquire(&countLock);
+    pageCount[pa >> PGSHIFT]++;
+    release(&countLock);
   }
+  lcr3(v2p(pgdir));
   return d;
 
 bad:
   freevm(d);
+  lcr3(v2p(pgdir));
   return 0;
 }
 
@@ -376,3 +405,59 @@
   }
   return 0;
 }
+
+
+
+void pageFaultHandler(uint err_code)
+{
+  uint va = rcr2();
+  uint pa;
+  pte_t *pte;
+  char *mem;
+
+  
+  if(va >= KERNBASE || (pte = walkpgdir(proc->pgdir, (void*)va, 0)) == 0  || !(*pte & PTE_P) || !(*pte & PTE_U))
+  {
+    cprintf("Illegal memory access..process killed\n");
+    proc->killed = 1;
+    return;
+  }
+  
+  if(*pte & PTE_W)
+  {
+    panic("pagefault writeable");
+  }
+  else
+  {
+    pa = PTE_ADDR(*pte);
+    acquire(&countLock);
+    if(pageCount[pa >> PGSHIFT] == 1)
+    {
+      //cprintf("exactly one page pointing \n ");
+      *pte |= PTE_W;
+    }
+    else if(pageCount[pa >> PGSHIFT] > 1)
+    {
+      //cprintf("More than one page pointing \n ");
+      mem = kalloc();
+      if(mem == 0)
+      {
+        //cprintf("page fault out of memory...process killed");
+        proc->killed = 1;
+        release(&countLock);
+        return;
+      }
+      memmove(mem, (char*)p2v(pa), PGSIZE);
+      pageCount[pa >> PGSHIFT]--;
+      pageCount[v2p(mem) >> PGSHIFT]++;
+      *pte = v2p(mem) | PTE_P | PTE_W | PTE_U;
+    } 
+    else
+    {
+      release(&countLock);
+      panic("pagefault wrong refcount");
+    }
+    release(&countLock);
+    lcr3(v2p(proc->pgdir));
+  }
+}
\ No newline at end of file
