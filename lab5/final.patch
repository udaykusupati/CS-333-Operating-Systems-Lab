diff -Naur michaelee-xv6-9dce23b9d05d_1/defs.h michaelee-xv6-9dce23b9d05d_2/defs.h
--- michaelee-xv6-9dce23b9d05d_1/defs.h	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/defs.h	2016-09-25 02:25:35.383528000 +0530
@@ -116,7 +116,9 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
-
+int 			setprio(int);
+int 			getprio(void);
+//EDIT MADE HERE
 // swtch.S
 void            swtch(struct context**, struct context*);
 
diff -Naur michaelee-xv6-9dce23b9d05d_1/Makefile michaelee-xv6-9dce23b9d05d_2/Makefile
--- michaelee-xv6-9dce23b9d05d_1/Makefile	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/Makefile	2016-09-25 22:00:08.036210000 +0530
@@ -167,6 +167,9 @@
 	_wc\
 	_zombie\
 	_bigtest\
+	_testmyscheduler\
+	_testmy2\
+	_testmy3\
 	#_getcount\
 
 fs.img: mkfs README $(UPROGS)
@@ -237,6 +240,9 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	testmyscheduler.c\
+	testmy2.c\
+	testmy3.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff -Naur michaelee-xv6-9dce23b9d05d_1/proc.c michaelee-xv6-9dce23b9d05d_2/proc.c
--- michaelee-xv6-9dce23b9d05d_1/proc.c	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/proc.c	2016-09-25 02:26:28.959526000 +0530
@@ -69,7 +69,9 @@
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
-
+  //EDIT MADE HERE
+  p->priority = 50;
+  p->cycles_run = 0;
   return p;
 }
 
@@ -159,6 +161,22 @@
   safestrcpy(np->name, proc->name, sizeof(proc->name));
   return pid;
 }
+//EDIT MADE HERE
+int setprio(int prio)
+{   
+    acquire(&ptable.lock);
+    proc->priority = prio;
+    release(&ptable.lock);
+    return 0;
+}
+//EDIT MADE HERE
+int getprio(void)
+{   
+    acquire(&ptable.lock);
+    int prio = proc->priority;
+    release(&ptable.lock);
+    return prio;
+}
 
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
@@ -258,23 +276,32 @@
 scheduler(void)
 {
   struct proc *p;
-
+  //EDIT MADE HERE
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    
+    int ran = 0;
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
-
+      if(p->cycles_run >= p->priority)
+      {
+        continue;
+      }
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
+         
+
       proc = p;
       switchuvm(p);
       p->state = RUNNING;
+      p->cycles_run++;
+      ran = 1;
       swtch(&cpu->scheduler, proc->context);
       switchkvm();
 
@@ -282,8 +309,18 @@
       // It should have changed its p->state before coming back.
       proc = 0;
     }
+    if(ran == 0)
+    {
+      for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+      {
+        if(p->state == RUNNABLE)
+        {
+          p->cycles_run = 0;  
+        }   
+      }
+    }
     release(&ptable.lock);
-
+    
   }
 }
 
diff -Naur michaelee-xv6-9dce23b9d05d_1/proc.h michaelee-xv6-9dce23b9d05d_2/proc.h
--- michaelee-xv6-9dce23b9d05d_1/proc.h	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/proc.h	2016-09-25 22:14:55.156185000 +0530
@@ -66,6 +66,9 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int priority;                // Priority of the process
+  int cycles_run;              // Number of cycles run so far modulo priority
+  //EDIT MADE HERE 
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff -Naur michaelee-xv6-9dce23b9d05d_1/syscall.c michaelee-xv6-9dce23b9d05d_2/syscall.c
--- michaelee-xv6-9dce23b9d05d_1/syscall.c	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/syscall.c	2016-09-25 02:24:48.799529000 +0530
@@ -98,6 +98,10 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_setprio(void);
+extern int sys_getprio(void);
+//EDIT MADE HERE 
+
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +125,9 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setprio] sys_setprio,
+[SYS_getprio] sys_getprio,
+//EDIT MADE HERE
 };
 
 void
diff -Naur michaelee-xv6-9dce23b9d05d_1/syscall.h michaelee-xv6-9dce23b9d05d_2/syscall.h
--- michaelee-xv6-9dce23b9d05d_1/syscall.h	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/syscall.h	2016-09-25 02:24:52.283529000 +0530
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setprio 22
+#define SYS_getprio 23
+//EDIT MADE HERE
\ No newline at end of file
diff -Naur michaelee-xv6-9dce23b9d05d_1/sysproc.c michaelee-xv6-9dce23b9d05d_2/sysproc.c
--- michaelee-xv6-9dce23b9d05d_1/sysproc.c	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/sysproc.c	2016-09-25 02:25:04.351529000 +0530
@@ -88,3 +88,26 @@
   release(&tickslock);
   return xticks;
 }
+
+//EDIT MADE HERE
+int 
+sys_setprio(void)
+{
+    int prio;
+    if(argint(0, &prio) < 0)
+    {
+        return -1;
+    }
+    if(prio<=0)
+    {
+      return -1;
+    }
+    return setprio(prio);
+}
+
+//EDIT MADE HERE
+int 
+sys_getprio(void)
+{
+    return getprio();
+}
\ No newline at end of file
diff -Naur michaelee-xv6-9dce23b9d05d_1/testmy2.c michaelee-xv6-9dce23b9d05d_2/testmy2.c
--- michaelee-xv6-9dce23b9d05d_1/testmy2.c	1970-01-01 05:30:00.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/testmy2.c	2016-09-25 22:07:13.220198000 +0530
@@ -0,0 +1,107 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "param.h"
+#include "types.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+char buf[8192];
+char name[3];
+char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };
+int stdout = 1;
+
+int
+main(void)
+{
+    	int pid = fork();
+	if(pid<0)
+	{
+		printf(1, "Fork failed\n");
+	}
+	int fd;
+  int i;
+
+  printf(stdout, "small file test\n");
+  fd = open("small", O_CREATE|O_RDWR);
+  if(fd >= 0){
+    printf(stdout, "creat small succeeded; ok\n");
+  } else {
+    printf(stdout, "error: creat small failed!\n");
+    exit();
+  }
+  for(i = 0; i < 100; i++){
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+      printf(stdout, "error: write aa %d new file failed\n", i);
+      exit();
+    }
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+      printf(stdout, "error: write bb %d new file failed\n", i);
+      exit();
+    }
+  }
+  printf(stdout, "writes ok\n");
+  close(fd);
+  
+ 	if(pid > 0)
+ 	{
+ 		int i = 0;
+ 		int j;
+ 		printf(1, "The priority of the parent is %d \n", getprio());
+ 		for(j = 0; j<40; j++)
+ 		{
+ 			fd = open("small", O_RDONLY);
+		  if(fd >= 0){
+		    //printf(stdout, "open small succeeded ok in parent\n");
+		  } else {
+		    printf(stdout, "error: open small failed! in parent\n");
+		    exit();
+		  }
+		  i = read(fd, buf, 2000);
+		  if(i == 2000){
+		    printf(stdout, "read succeeded ok in parent\n");
+		  } else {
+		    printf(stdout, "read failed in parent\n");
+		    exit();
+		  }
+		  close(fd);
+
+	 		//printf(1, "Parent has executed\n" );
+ 		}
+ 		printf(1, "The parent has terminated \n");
+ 		wait();
+ 		exit();
+ 	}
+ 	else
+ 	{
+ 		setprio(100);
+ 	  int i = 0;
+ 		int j;
+ 		printf(1, "The priority of the child is %d \n", getprio());
+	 	for(j = 0; j<40; j++)
+ 		{
+ 			fd = open("small", O_RDONLY);
+		  if(fd >= 0){
+		    //printf(stdout, "open small succeeded ok in child\n");
+		  } else {
+		    printf(stdout, "error: open small failed in child!\n");
+		    exit();
+		  }
+		  i = read(fd, buf, 2000);
+		  if(i == 2000){
+		    printf(stdout, "read succeeded ok in child\n");
+		  } else {
+		    printf(stdout, "read failed in child\n");
+		    exit();
+		  }
+		  close(fd);
+
+ 			//printf(1, "Child has executed\n" );
+ 		}
+ 	} 
+ 	printf(1, "The child has terminated \n");	
+ 	exit();
+}
\ No newline at end of file
diff -Naur michaelee-xv6-9dce23b9d05d_1/testmy3.c michaelee-xv6-9dce23b9d05d_2/testmy3.c
--- michaelee-xv6-9dce23b9d05d_1/testmy3.c	1970-01-01 05:30:00.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/testmy3.c	2016-09-25 21:41:43.692241000 +0530
@@ -0,0 +1,43 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "param.h"
+#include "types.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+int
+main(void)
+{
+	int pid = fork();
+	if(pid<0)
+	{
+		printf(1, "Fork failed\n");
+	}
+	if(pid > 0)
+ 	{
+ 		int i;
+	 	for(i = 0 ; i<40; i++)
+	 	{
+	 		sleep(1);
+	 		printf(1, "Parent\n");
+	 	}
+	 	wait();
+	 	exit();
+ 	}
+ 	if(pid == 0)
+ 	{
+ 		setprio(100);
+		int i;
+	 	for(i = 0 ; i<40; i++)
+	 	{
+	 		sleep(1);
+	 		printf(1, "Child\n");
+	 	}
+	 	exit();
+ 	}
+ 	exit();
+}
\ No newline at end of file
diff -Naur michaelee-xv6-9dce23b9d05d_1/testmyscheduler.c michaelee-xv6-9dce23b9d05d_2/testmyscheduler.c
--- michaelee-xv6-9dce23b9d05d_1/testmyscheduler.c	1970-01-01 05:30:00.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/testmyscheduler.c	2016-09-25 21:49:53.724227000 +0530
@@ -0,0 +1,49 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+ 	int pid = fork();
+ 	if(pid<0)
+ 	{
+ 		printf(1, "Fork failed\n");
+ 	}
+ 	if(pid > 0)
+ 	{
+ 		
+ 		int j = 0;
+ 		for(; j<20; j++)
+ 		{
+ 			long long int i = 0;
+	 		for(;i <= 10000000;i++)
+	 		{
+		 		if(i == 10000000)
+		 		{
+		 			printf(1, "Parent\n" );
+		 		}
+	 		}
+ 		}
+ 		wait();
+ 		
+ 	}
+ 	else
+ 	{
+ 		setprio(100);
+ 		int j = 0;
+ 		for(; j<20; j++)
+ 		{
+ 			long long int i = 0;
+	 		for(;i <= 10000000;i++)
+	 		{
+		 		if(i == 10000000)
+		 		{
+		 			printf(1, "Child\n" );
+		 		}
+	 		}
+ 		}
+ 	}
+ 	
+ 	exit();
+}
\ No newline at end of file
diff -Naur michaelee-xv6-9dce23b9d05d_1/user.h michaelee-xv6-9dce23b9d05d_2/user.h
--- michaelee-xv6-9dce23b9d05d_1/user.h	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/user.h	2016-09-25 02:25:11.155529000 +0530
@@ -22,6 +22,9 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int setprio(int);
+int getprio(void);
+//EDIT MADE HERE
 
 // ulib.c
 int stat(char*, struct stat*);
diff -Naur michaelee-xv6-9dce23b9d05d_1/usys.S michaelee-xv6-9dce23b9d05d_2/usys.S
--- michaelee-xv6-9dce23b9d05d_1/usys.S	2015-06-03 11:33:54.000000000 +0530
+++ michaelee-xv6-9dce23b9d05d_2/usys.S	2016-09-25 02:25:21.483528000 +0530
@@ -29,3 +29,6 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(setprio)
+SYSCALL(getprio)
+#EDIT MADE HERE
\ No newline at end of file
